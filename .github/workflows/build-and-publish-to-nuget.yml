name: BuildAndPublishNuGet

on:
  workflow_call:
    inputs:
      csproj-path:
        description: 'Path to the .csproj file'
        required: true
        type: string
      nuget-package-name:
        description: 'NuGet package name'
        required: true
        type: string      
      dotnet-version:
        required: false
        type: string
        default: '8.0.x'
      release-path:
        required: false
        type: string
        default: 'net8.0'
      build-configuration:
        required: false
        type: string
        default: 'Release'
    secrets:
      NUGET_API_KEY:
        required: true
      NUGET_SOURCE_URI:
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }} 
      - name: Build Project
        run: dotnet build ${{ inputs.csproj-path }} --configuration ${{ inputs.build-configuration }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: '**/bin/${{ inputs.build-configuration }}/${{ inputs.release-path }}'

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: Test Project
        run: dotnet test ${{ inputs.csproj-path }} --verbosity normal

  version:
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.increment_version.outputs.next_version }}
    steps:
      - name: Check package and get version
        id: get_version
        run: |
          PACKAGE_NAME="${{inputs.nuget-package-name}}"
          DEFAULT_VERSION="0.0.1"
          
          CURRENT_VERSION=$(curl -s "https://azuresearch-usnc.nuget.org/query?q=packageid:$PACKAGE_NAME&prerelease=false&semVerLevel=2.0.0" | jq -r '.data[0].versions[] | select(.version) | .version' | sort -V | tail -n1)
          
          if [ -z "$CURRENT_VERSION" ]; then
            echo "No listed versions found. Using default version: $DEFAULT_VERSION"
            CURRENT_VERSION=$DEFAULT_VERSION
          else
            echo "Current version of $PACKAGE_NAME: $CURRENT_VERSION"
          fi
          
          echo "::set-output name=version::$CURRENT_VERSION"

      - name: Increment version
        id: increment_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "::set-output name=next_version::$NEXT_VERSION"
          echo "Next version: $NEXT_VERSION"


  tag:
    needs: version
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v3
      - name: Create and Push Git Tag
        run: |
          git config --global user.email "greg@xerris.com"
          git config --global user.name "Greg Cook"
          NEXT_VERSION=${{ needs.version.outputs.next_version }}
          git tag "v$NEXT_VERSION"
          git push origin "v$NEXT_VERSION"

  pack:
    needs: [version, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Pack NuGet package
        env:
          DOTNET_OUTPUT_DIR: ./packages
        run: |
          dotnet pack ${{ inputs.csproj-path }} \
          --configuration ${{ inputs.build-configuration }} \
          /p:Version=${{ needs.version.outputs.next_version }} \
          /p:PackageOutputPath=$DOTNET_OUTPUT_DIR
          
      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ./packages

  publish:
    needs: [pack, tag]
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ./packages
      - name: Publish to NuGet
        run: >
          dotnet nuget push ./packages/*.nupkg
          --api-key ${{ secrets.NUGET_API_KEY }}
          --source "${{ secrets.NUGET_SOURCE_URI }}/v3/index.json"
          --timeout 360
          --skip-duplicate
